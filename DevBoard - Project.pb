; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; AUTOMATICALLY GENERATED CODE, DO NOT MODIFY
; UNLESS YOU REALLY, REALLY, REALLY MEAN IT !!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code generated by : Dev-Object - V2.2.5
; Project name : Dev-Board
; File name : DevBoard - CardsList.pb
; File Version : 1.0.0
; Programmation : OK
; Programmed by : Guillaume Saumure
; AKA : StarBootics
; E-mail : gsaumure@cgocable.ca
; Creation Date : June 19th, 2024
; Last update : June 19th, 2024
; Coded for PureBasic : V6.11 LTS
; Platform : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; This is free and unencumbered software released into the public domain.
; 
; Anyone is free to copy, modify, publish, use, compile, sell, or
; distribute this software, either in source code form or as a compiled
; binary, for any purpose, commercial or non-commercial, and by any
; means.
; 
; In jurisdictions that recognize copyright laws, the author or authors
; of this software dedicate any and all copyright interest in the
; software to the public domain. We make this dedication for the benefit
; of the public at large and to the detriment of our heirs and
; successors. We intend this dedication to be an overt act of
; relinquishment in perpetuity of all present and future rights to this
; software under copyright law.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
; IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.
; 
; For more information, please refer to <http://unlicense.org/>
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DeclareModule Project
  
  Interface Project
    
    GetProjectFileLoaded.i()
    GetProjectFileName.s()
    GetName.s()
    GetListOfCardsList.i()
    SetProjectFileLoaded(ProjectFileLoaded.i)
    SetProjectFileName(ProjectFileName.s)
    SetName(Name.s)
    SetListOfCardsList(*ListOfCardsList.CardsList::CardsList)
    AddListOfCardsListEx(*ListOfCardsList.CardsList::CardsList)
    SelectListOfCardsList.i(Index.i)
    NextListOfCardsList.i()
    DeleteListOfCardsList()
    ResetListOfCardsList()
    ClearListOfCardsList()
    ListOfCardsListIndex.i()
    ListOfCardsListSize.i()
    XML_CreateFile()
    XML_LoadFile()
    Refresh()
    SelectCardsListByName(Name.s)
    MoveCardBetweenList(CardUUID.s, FromList.s, ToList.s)
    SanityCheck(DeltaTime.l)
    ClearAllCardsFromList(Name.s)
    DeleteCardFromList(Name.s, CardUUID.s)
    Free()
    
  EndInterface
  
  Declare.i New()
  
EndDeclareModule

Module Project
  
  DisableDebugger
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Structure declaration <<<<<

  Structure Private_Members
    
    VirtualTable.i
    ProjectFileLoaded.i
    ProjectFileName.s
    Name.s
    List ListOfCardsList.CardsList::CardsList()
    
  EndStructure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Getters <<<<<
  
  Procedure.i GetProjectFileLoaded(*This.Private_Members)
  
    ProcedureReturn *This\ProjectFileLoaded
  EndProcedure
  
  Procedure.s GetProjectFileName(*This.Private_Members)
  
    ProcedureReturn *This\ProjectFileName
  EndProcedure
  
  Procedure.s GetName(*This.Private_Members)
    
    ProcedureReturn *This\Name
  EndProcedure
  
  Procedure.i GetListOfCardsList(*This.Private_Members)
    
    ProcedureReturn *This\ListOfCardsList()
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Setters <<<<<
  
  Procedure SetProjectFileLoaded(*This.Private_Members, ProjectFileLoaded.i)
  
    *This\ProjectFileLoaded = ProjectFileLoaded
    
  EndProcedure
  
  Procedure SetProjectFileName(*This.Private_Members, ProjectFileName.s)
  
    *This\ProjectFileName = ProjectFileName
    
  EndProcedure
  
  Procedure SetName(*This.Private_Members, Name.s)
    
    *This\Name = Name
    
  EndProcedure
  
  Procedure SetListOfCardsList(*This.Private_Members, *ListOfCardsList.CardsList::CardsList)
    
    If *This\ListOfCardsList() <> #Null
      *This\ListOfCardsList()\Free()
    EndIf
    
    *This\ListOfCardsList() = *ListOfCardsList
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The AddEx to linked list operator(s) <<<<<

  Procedure AddListOfCardsListEx(*This.Private_Members, *ListOfCardsList.CardsList::CardsList)
    
    AddElement(*This\ListOfCardsList())
    *This\ListOfCardsList() = *ListOfCardsList
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Select in linked list operator(s) <<<<<

  Procedure.i SelectListOfCardsList(*This.Private_Members, Index.i)
    
    ProcedureReturn SelectElement(*This\ListOfCardsList(), Index)
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Next element in linked list operator(s) <<<<<

  Procedure.i NextListOfCardsList(*This.Private_Members)
    
    ProcedureReturn NextElement(*This\ListOfCardsList())
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Delete element from linked list operator(s) <<<<<

  Procedure DeleteListOfCardsList(*This.Private_Members)
    
    If *This\ListOfCardsList() <> #Null
      *This\ListOfCardsList()\Free()
    EndIf
    
    DeleteElement(*This\ListOfCardsList())
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Reset linked list operator(s) <<<<<

  Procedure ResetListOfCardsList(*This.Private_Members)
    
    ResetList(*This\ListOfCardsList())
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Clear linked list operator(s) <<<<<

  Procedure ClearListOfCardsList(*This.Private_Members)
    
    ForEach *This\ListOfCardsList()
      If *This\ListOfCardsList() <> #Null
        *This\ListOfCardsList()\Free()
      EndIf
    Next
    
    ClearList(*This\ListOfCardsList())
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Index in the linked list operator(s) <<<<<

  Procedure.i ListOfCardsListIndex(*This.Private_Members)
    
    ProcedureReturn ListIndex(*This\ListOfCardsList())
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Size of the linked list operator(s) <<<<<

  Procedure.i ListOfCardsListSize(*This.Private_Members)
    
    ProcedureReturn ListSize(*This\ListOfCardsList())
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< XML Set Node with child nodes <<<<<

  Procedure XML_SetNode(*This.Private_Members, CurrentNode.i)
    
    If ParentXMLNode(CurrentNode) = #Null
      ObjectNode = CreateXMLNode(CurrentNode, "Project")
    Else
      ObjectNode = CurrentNode
    EndIf
    
    FieldNode = CreateXMLNode(ObjectNode, "Name")
    SetXMLNodeText(FieldNode, *This\Name)
    
    FieldNode = CreateXMLNode(ObjectNode, "ListOfCardsList")
    SetXMLAttribute(FieldNode, "ElementCount", Str(ListSize(*This\ListOfCardsList())))
    
    ForEach *This\ListOfCardsList()
      ElementNode = CreateXMLNode(FieldNode, "Element")
      SetXMLAttribute(ElementNode, "ID", Str(ListIndex(*This\ListOfCardsList())))
      *This\ListOfCardsList()\XML_SetNode(ElementNode)
    Next
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< XML Get Node with child nodes <<<<<

  Procedure.i XML_GetNode(*This.Private_Members, CurrentNode.i)
    
    If ParentXMLNode(CurrentNode) = #Null
      ObjectNode = ChildXMLNode(CurrentNode)
      If GetXMLNodeName(ObjectNode) = "Project"
        Success.i = #True
      EndIf
    Else
      Success = #True
      ObjectNode = CurrentNode
    EndIf
    
    If Success = #True
      
      FieldNode = ChildXMLNode(ObjectNode)
      
      While FieldNode
        
        Select GetXMLNodeName(FieldNode)
    
          Case "Name"
            *This\Name = GetXMLNodeText(FieldNode)
    
          Case "ListOfCardsList"
            ListOfCardsList_Max.i = Val(GetXMLAttribute(FieldNode, "ElementCount")) - 1
            
            For ListOfCardsListID.i = 0 To ListOfCardsList_Max
              
              ElementNode = ChildXMLNode(FieldNode, ListOfCardsListID + 1)
              
              If GetXMLNodeName(ElementNode) = "Element"
                AddElement(*This\ListOfCardsList())
                *This\ListOfCardsList() = CardsList::New()
                *This\ListOfCardsList()\XML_GetNode(ElementNode)
              EndIf
              
            Next
    
        EndSelect
        
        FieldNode = NextXMLNode(FieldNode)
        
      Wend
      
    EndIf
    
    ProcedureReturn Success
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< XML Create file <<<<<
  
  Procedure XML_CreateFile(*This.Private_Members)
    
    FileID = CreateXML(#PB_Any, #PB_UTF8)
    
    If IsXML(FileID)
      XML_SetNode(*This, RootXMLNode(FileID))
      FormatXML(FileID, #PB_XML_ReFormat | #PB_XML_ReIndent)
      SaveXML(FileID, *This\ProjectFileName, #PB_UTF8)
      FreeXML(FileID)
    EndIf
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< XML Load file <<<<<

  Procedure XML_LoadFile(*This.Private_Members)
    
    FileID = LoadXML(#PB_Any, *This\ProjectFileName, #PB_UTF8)
    
    ClearListOfCardsList(*This)
    
    If IsXML(FileID)
      FormatXML(FileID, #PB_XML_CutNewline)
      XML_GetNode(*This, RootXMLNode(FileID))
      FreeXML(FileID)
    EndIf
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< L'opérateur Refresh <<<<<
  
  Procedure Refresh(*This.Private_Members)
    
    *This\Name = ""
    
    ForEach *This\ListOfCardsList()
      If *This\ListOfCardsList() <> #Null
        *This\ListOfCardsList()\Free()
      EndIf
    Next
    
    ClearList(*This\ListOfCardsList())
    
    AddListOfCardsListEx(*This, CardsList::New("Ideas"))
    AddListOfCardsListEx(*This, CardsList::New("InProgress"))
    AddListOfCardsListEx(*This, CardsList::New("Completed"))
    AddListOfCardsListEx(*This, CardsList::New("Abandoned"))
    AddListOfCardsListEx(*This, CardsList::New("Archive"))
    AddListOfCardsListEx(*This, CardsList::New("Trash"))
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Select in linked list operator by name <<<<<

  Procedure SelectCardsListByName(*This.Private_Members, Name.s)
    
    FoundAtIndex.l = -1
    
    ForEach *This\ListOfCardsList()
      If *This\ListOfCardsList()\GetName() = Name
        FoundAtIndex = ListIndex(*This\ListOfCardsList())
        Break
      EndIf
    Next
    
    If FoundAtIndex = -1
      SelectElement(*This\ListOfCardsList(), 0)
    EndIf
   
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The move card between list operator <<<<<
  
  Procedure MoveCardBetweenList(*This.Private_Members, CardUUID.s, FromList.s, ToList.s)
    
    SelectCardsListByName(*This, FromList)
    
    *This\ListOfCardsList()\SearchCardByUUID(CardUUID)
    *Card.Card::Card = *This\ListOfCardsList()\GetCards()
    *Copy.Card::Card = *Card\Copy()
    *This\ListOfCardsList()\DeleteCards()
    
    SelectCardsListByName(*This, ToList)
    
    *This\ListOfCardsList()\LastCards()
    *This\ListOfCardsList()\AddCardsEx(*Copy)
    
    Select ToList
        
      Case "Ideas", "InProgress"
        *Copy\SetCompletedDate(0)
        *Copy\SetAbandonedDate(0)
        *Copy\SetArchivedDate(0)
        *Copy\SetTrashedDate(0)
        
      Case "Completed"
        *Copy\SetCompletedDate(Date())
        
      Case "Abandoned"
        *Copy\SetAbandonedDate(Date())
        
      Case "Archive"
        *Copy\SetArchivedDate(Date())
        
      Case "Trash"
        *Copy\SetTrashedDate(Date())
        
    EndSelect
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Sanity Check operator <<<<<
  
  Procedure SanityCheck(*This.Private_Members, DeltaTime.l)
    
    If DeltaTime > 0
      
      While Exit_Condition.i = #False
        
        Exit_Condition = #True
        
        SelectCardsListByName(*This, "Completed")
        
        *This\ListOfCardsList()\ResetCards()
        
        While *This\ListOfCardsList()\NextCards()
          
          *Card.Card::Card = *This\ListOfCardsList()\GetCards()
          
          If Date() - *Card\GetCompletedDate() >= DeltaTime
            MoveCardBetweenList(*This, *Card\GetUUID(), "Completed", "Archive")
            Exit_Condition = #False
            Break
          EndIf
          
        Wend
        
      Wend
      
      Exit_Condition.i = #False
      
      While Exit_Condition.i = #False
        
        Exit_Condition = #True
        
        SelectCardsListByName(*This, "Abandoned")
        
        *This\ListOfCardsList()\ResetCards()
        
        While *This\ListOfCardsList()\NextCards()
          
          *Card.Card::Card = *This\ListOfCardsList()\GetCards()
          
          If Date() - *Card\GetAbandonedDate() >= DeltaTime
            MoveCardBetweenList(*This, *Card\GetUUID(), "Abandoned", "Trash")
            Exit_Condition = #False
            Break
          EndIf
          
        Wend
        
      Wend
      
    EndIf
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Clear All Cards From List operator <<<<<
  
  Procedure ClearAllCardsFromList(*This.Private_Members, Name.s)
    
    SelectCardsListByName(*This, Name)
    *This\ListOfCardsList()\ClearCards()
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Delete Card From List operator <<<<<
  
  Procedure DeleteCardFromList(*This.Private_Members, Name.s, CardUUID.s)
    
    SelectCardsListByName(*This, Name)
    *This\ListOfCardsList()\SearchCardByUUID(CardUUID)
    *This\ListOfCardsList()\DeleteCards()
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Destructor <<<<<

  Procedure Free(*This.Private_Members)
    
    ForEach *This\ListOfCardsList()
      If *This\ListOfCardsList() <> #Null
        *This\ListOfCardsList()\Free()
      EndIf
    Next
    
    FreeStructure(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Constructor <<<<<

  Procedure.i New()
    
    *This.Private_Members = AllocateStructure(Private_Members)
    *This\VirtualTable = ?START_METHODS
    
    *This\Name = ""
    
    AddListOfCardsListEx(*This, CardsList::New("Ideas"))
    AddListOfCardsListEx(*This, CardsList::New("InProgress"))
    AddListOfCardsListEx(*This, CardsList::New("Completed"))
    AddListOfCardsListEx(*This, CardsList::New("Abandoned"))
    AddListOfCardsListEx(*This, CardsList::New("Archive"))
    AddListOfCardsListEx(*This, CardsList::New("Trash"))
    
    ProcedureReturn *This
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Virtual Table Entries <<<<<

  DataSection
    START_METHODS:
    Data.i @GetProjectFileLoaded()
    Data.i @GetProjectFileName()
    Data.i @GetName()
    Data.i @GetListOfCardsList()
    Data.i @SetProjectFileLoaded()
    Data.i @SetProjectFileName()
    Data.i @SetName()
    Data.i @SetListOfCardsList()
    Data.i @AddListOfCardsListEx()
    Data.i @SelectListOfCardsList()
    Data.i @NextListOfCardsList()
    Data.i @DeleteListOfCardsList()
    Data.i @ResetListOfCardsList()
    Data.i @ClearListOfCardsList()
    Data.i @ListOfCardsListIndex()
    Data.i @ListOfCardsListSize()
    Data.i @XML_CreateFile()
    Data.i @XML_LoadFile()
    Data.i @Refresh()
    Data.i @SelectCardsListByName()
    Data.i @MoveCardBetweenList()
    Data.i @SanityCheck()
    Data.i @ClearAllCardsFromList()
    Data.i @DeleteCardFromList()
    Data.i @Free()
    END_METHODS:
  EndDataSection
  
  EnableDebugger
  
EndModule

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code generated in : 00.001 seconds (342000.00 lines/second) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<
; <<<<< END OF FILE <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 6.11 LTS (Linux - x64)
; Folding = ------
; Optimizer
; EnableXP
; CompileSourceDirectory
; Compiler = PureBasic 6.02 beta 4 LTS - C Backend (Linux - x64)