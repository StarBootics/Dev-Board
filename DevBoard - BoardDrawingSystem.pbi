; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; AUTOMATICALLY GENERATED CODE, DO NOT MODIFY
; UNLESS YOU REALLY, REALLY, REALLY MEAN IT !!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code generated by : Dev-Object - V2.2.5
; Project name : Dev-Board
; File name : DevBoard - BoardDrawingSystem.pbi
; File Version : 1.0.0
; Programmation : OK
; Programmed by : Guillaume Saumure
; AKA : StarBootics
; E-mail : gsaumure@cgocable.ca
; Creation Date : June 17th, 2024
; Last update : June 19th, 2024
; Coded for PureBasic : V6.11 LTS
; Platform : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; This is free and unencumbered software released into the public domain.
; 
; Anyone is free to copy, modify, publish, use, compile, sell, or
; distribute this software, either in source code form or as a compiled
; binary, for any purpose, commercial or non-commercial, and by any
; means.
; 
; In jurisdictions that recognize copyright laws, the author or authors
; of this software dedicate any and all copyright interest in the
; software to the public domain. We make this dedication for the benefit
; of the public at large and to the detriment of our heirs and
; successors. We intend this dedication to be an overt act of
; relinquishment in perpetuity of all present and future rights to this
; software under copyright law.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
; IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.
; 
; For more information, please refer to <http://unlicense.org/>
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DeclareModule BoardDrawingSystem
  
  Interface BoardDrawingSystem
    
    ReloadFonts()
    GetSelectedBoardName.s()
    GetSelectedCardInfo(*UUID.String, *Title.String, *Description.String)
    SetBoardDisplayName(BoardName.s, BoardDisplayName.s)
    UpdateBoardCard(BoardName.s, UUID.s, Title.s, Description.s)
    AddBoard(BoardName.s, BoardDisplayName.s)
    AddBoardCard(BoardName.s, Title.s, Description.s, UUID.s)
    ClearBoardCards()
    DrawEverything()
    RefreshFlyingOverState()
    RefreshLeftButtonState(State.i)
    RefreshDraggedCardPosition()
    DeleteBoardCard.i(BoardName.s, UUID.s)
    ComputeBoardCanvasWidth.i()
    Free()
    
  EndInterface
  
  ; Declare Free(*This)
  Declare.i New(ScrollAreaID.i, CanvasID.i, *Settings.Setting::Setting, *OnDragSuccessful, OnDragUserData.i)
  
EndDeclareModule

Module BoardDrawingSystem
  
  ;DisableDebugger
  
  #SCROLL_BAR_WIDTH = 15
  #BOARD_MIN_WIDTH = 450 
  #BOARD_MIN_HEIGHT = 800
  
  Prototype OnDragSuccessful(UserData.i, CardUUID.s, FromList.s, ToList.s)
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Structures declaration <<<<<
  
  Structure Position
    X.i
    Y.i
  EndStructure
  
  Structure Margins
    Top.i
    Left.i
    Right.i
    Bottom.i
  EndStructure
  
  Structure Fonts
    
    TitleFontID.i
    CardTitleFontID.i
    CardNormalFontID.i
    
  EndStructure
  
  Structure Card
    
    Title.s
    Description.s
    UUID.s
    
    TitleX.i
    TitleY.i
    TitleWidth.i
    TitleHeight.i
    
    DescriptionX.i
    DescriptionY.i
    DescriptionWidth.i
    DescriptionHeight.i
    
    PosX.i
    PosY.i
    Width.i
    Height.i
    
    AreWeFlyingOver.i
    IsSelected.i
    NeedToBeRendered.i
    
  EndStructure
  
  Structure DraggedCard
    
    FromListName.s
    FromListIndex.l
    ToListName.s
    Card.Card
    NeedToBeRendered.i
    
  EndStructure
  
  Structure Board
    Name.s
    DisplayName.s
    PosX.l
    PosY.l
    Width.l
    Height.l
    NameX.l
    NameY.l
    NameWidth.l
    NameHeight.l
    AreWeFlyingOver.i
    IsSelected.i
    List Cards.Card()
  EndStructure 
  
  Structure Private_Members
    
    VirtualTable.i
    ScrollAreaID.i
    CanvasID.i
    *Settings.Setting::Setting
    LeftMouseButtonDown.i
    Width.i
    Height.i
    Margins.Margins
    Fonts.Fonts
    DraggedCard.DraggedCard
    List Boards.Board()
    *OnDragSuccessful
    OnDragUserData.i
    
  EndStructure
  
  Procedure.i Max(Number01.i, Number02.i)
    
    Biggest.i = Number01
    
    If Number02 > Biggest
      Biggest = Number02
    EndIf
    
    ProcedureReturn Biggest
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Drawing related methods <<<<<
  
  Procedure DrawRoundBox(x.d, y.d, Width.d, Height.d, BoaderWidth.d, Radius.d, BackColor.l, BorderColor.l)	
    
    ResetCoordinates()
    MovePathCursor(x + Radius, y, #PB_Path_Default)
    AddPathEllipse(0, Radius, Radius, Radius, 180, -90, #PB_Path_Relative) 
    AddPathLine(Width - Radius - Radius, 0, #PB_Path_Relative) 
    AddPathEllipse(0, Radius, Radius,Radius, -90, 0, #PB_Path_Connected | #PB_Path_Relative)
    AddPathLine(0, Height - Radius - Radius, #PB_Path_Relative) 
    AddPathEllipse(-Radius, 0, Radius, Radius, 0, 90, #PB_Path_Connected | #PB_Path_Relative) 
    AddPathLine(Radius + Radius - Width, 0, #PB_Path_Relative) 
    AddPathEllipse(0, -Radius, Radius, Radius, 90, 180, #PB_Path_Connected | #PB_Path_Relative) 
    ClosePath()
    
    VectorSourceColor(BackColor)
    FillPath(#PB_Path_Preserve)
    
    VectorSourceColor(BorderColor)
    StrokePath(BoaderWidth)
    
    ResetCoordinates()
    
  EndProcedure
  
  Procedure PreDrawBoards(*This.Private_Members, *Current.Position)
    
    If StartVectorDrawing(CanvasVectorOutput(*This\CanvasID))
      
      ForEach *This\Boards()
        
        *This\Boards()\PosX = *Current\X
        *This\Boards()\PosY = *Current\Y
        
        VectorFont(FontID(*This\Fonts\TitleFontID))
        
        *This\Boards()\NameWidth = VectorTextWidth(*This\Boards()\DisplayName)
        *This\Boards()\NameHeight = VectorTextHeight(*This\Boards()\DisplayName)
        *This\Boards()\NameX = *This\Boards()\PosX + (*This\Boards()\Width - *This\Boards()\NameWidth) / 2
        *This\Boards()\NameY = *This\Boards()\PosY
        
        CardY.d = *This\Boards()\NameY + *This\Margins\Top + *This\Boards()\NameHeight
        
        ForEach *This\Boards()\Cards()
          
          *This\Boards()\Cards()\PosX = *This\Boards()\PosX + *This\Margins\Left
          *This\Boards()\Cards()\PosY = CardY
          *This\Boards()\Cards()\Width = *This\Boards()\Width - *This\Margins\Left - *This\Margins\Right
          
          VectorFont(FontID(*This\Fonts\CardTitleFontID))
          
          *This\Boards()\Cards()\TitleWidth = VectorTextWidth(*This\Boards()\Cards()\Title)
          *This\Boards()\Cards()\TitleHeight = VectorTextHeight(*This\Boards()\Cards()\Title)
          *This\Boards()\Cards()\TitleX = *This\Boards()\Cards()\PosX + (*This\Boards()\Cards()\Width - *This\Boards()\Cards()\TitleWidth) / 2.0
          *This\Boards()\Cards()\TitleY = *This\Boards()\Cards()\PosY + *This\Margins\Top
          
          VectorFont(FontID(*This\Fonts\CardNormalFontID))
          
          *This\Boards()\Cards()\DescriptionX = *This\Boards()\Cards()\PosX + *This\Margins\Left
          *This\Boards()\Cards()\DescriptionY = *This\Boards()\Cards()\TitleY + *This\Margins\Top + *This\Boards()\Cards()\TitleHeight
          *This\Boards()\Cards()\DescriptionWidth = *This\Boards()\Cards()\Width - *This\Margins\Left - *This\Margins\Right
          *This\Boards()\Cards()\DescriptionHeight = VectorParagraphHeight(*This\Boards()\Cards()\Description, *This\Boards()\Cards()\DescriptionWidth, 2048.0)
          *This\Boards()\Cards()\Height = *This\Boards()\Cards()\TitleHeight + *This\Boards()\Cards()\DescriptionHeight + *This\Margins\Top + *This\Margins\Top + *This\Margins\Bottom
          
          CardY + *This\Boards()\Cards()\Height + *This\Margins\Bottom
          
          
          ; The following measure is to avoid the 32000 pixels
          ; limit for the ScrollAreaGadget() on Windows. This
          ; mean that some cards may not be displayed in that
          ; particular case. There is pleny of room for many 
          ; cards anyways and should not happen very often.
          
          If CardY > 31000
            Break 2
          EndIf
          
        Next
        
        If (CardY) > #BOARD_MIN_HEIGHT
          *This\Boards()\Height = CardY - *This\Margins\Bottom
        Else
          *This\Boards()\Height = #BOARD_MIN_HEIGHT
        EndIf
        
        *This\Height = Max(*This\Height, *This\Boards()\Height + 50)
        *Current\X = *Current\X + *This\Margins\Left + *This\Boards()\Width
        
      Next
      
      If *This\LeftMouseButtonDown = #True And *This\DraggedCard\NeedToBeRendered = #True
        
        VectorFont(FontID(*This\Fonts\CardTitleFontID))
        *This\DraggedCard\Card\TitleWidth = VectorTextWidth(*This\DraggedCard\Card\Title)
        *This\DraggedCard\Card\TitleHeight = VectorTextHeight(*This\DraggedCard\Card\Title)
        
        *This\DraggedCard\Card\TitleX = *This\DraggedCard\Card\PosX + (*This\DraggedCard\Card\Width - *This\DraggedCard\Card\TitleWidth) / 2.0
        *This\DraggedCard\Card\TitleY = *This\DraggedCard\Card\PosY + *This\Margins\Top
        
        VectorFont(FontID(*This\Fonts\CardNormalFontID))
        
        *This\DraggedCard\Card\DescriptionX = *This\DraggedCard\Card\PosX + *This\Margins\Left
        *This\DraggedCard\Card\DescriptionY = *This\DraggedCard\Card\TitleY + *This\Margins\Top + *This\DraggedCard\Card\TitleHeight
        *This\DraggedCard\Card\DescriptionWidth = *This\DraggedCard\Card\Width - *This\Margins\Left - *This\Margins\Right
        *This\DraggedCard\Card\DescriptionHeight = VectorParagraphHeight(*This\DraggedCard\Card\Description, *This\DraggedCard\Card\DescriptionWidth, 2048.0)
        *This\DraggedCard\Card\Height = *This\DraggedCard\Card\TitleHeight + *This\DraggedCard\Card\DescriptionHeight + *This\Margins\Top + *This\Margins\Top + *This\Margins\Bottom
        
      EndIf
      
      StopVectorDrawing()
      
    EndIf
    
  EndProcedure
  
  Procedure DrawBoards(*This.Private_Members)
    
    If StartVectorDrawing(CanvasVectorOutput(*This\CanvasID))
      
      DrawRoundBox(0, 0, *This\Width, *This\Height, 3.0, 0, RGBA(255, 255, 255, 255), RGBA(255, 255, 255, 255))	
      
      ForEach *This\Boards()
        
        If *This\Boards()\AreWeFlyingOver = #True And *This\Boards()\IsSelected = #False
          DrawRoundBox(*This\Boards()\PosX, *This\Boards()\PosY, *This\Boards()\Width, *This\Boards()\Height, 3.0, 20, *This\Settings\GetListBackColor(), *This\Settings\GetFlyOverBorderColor())	
        ElseIf *This\Boards()\IsSelected = #True
          DrawRoundBox(*This\Boards()\PosX, *This\Boards()\PosY, *This\Boards()\Width, *This\Boards()\Height, 3.0, 20, *This\Settings\GetListBackColor(), *This\Settings\GetSelectedBorderColor())	
        Else
          DrawRoundBox(*This\Boards()\PosX, *This\Boards()\PosY, *This\Boards()\Width, *This\Boards()\Height, 3.0, 20, *This\Settings\GetListBackColor(), *This\Settings\GetBorderColor())	
        EndIf
        
        VectorFont(FontID(*This\Fonts\TitleFontID))
        
        MovePathCursor(*This\Boards()\NameX, *This\Boards()\NameY, #PB_Path_Default)
        VectorSourceColor(*This\Settings\GetTextColor())
        DrawVectorText(*This\Boards()\DisplayName)
        
        ForEach *This\Boards()\Cards()
          
          If *This\Boards()\Cards()\AreWeFlyingOver = #True And *This\Boards()\Cards()\IsSelected = #False
            DrawRoundBox(*This\Boards()\Cards()\PosX, *This\Boards()\Cards()\PosY, *This\Boards()\Cards()\Width, *This\Boards()\Cards()\Height, 3.0, 10, *This\Settings\GetCardBackColor(), *This\Settings\GetFlyOverBorderColor())	
          ElseIf *This\Boards()\Cards()\IsSelected = #True
            DrawRoundBox(*This\Boards()\Cards()\PosX, *This\Boards()\Cards()\PosY, *This\Boards()\Cards()\Width, *This\Boards()\Cards()\Height, 3.0, 10, *This\Settings\GetCardBackColor(), *This\Settings\GetSelectedBorderColor())	
          Else
            DrawRoundBox(*This\Boards()\Cards()\PosX, *This\Boards()\Cards()\PosY, *This\Boards()\Cards()\Width, *This\Boards()\Cards()\Height, 3.0, 10, *This\Settings\GetCardBackColor(), *This\Settings\GetBorderColor())	
          EndIf
          
          MovePathCursor(*This\Boards()\Cards()\TitleX, *This\Boards()\Cards()\TitleY, #PB_Path_Default)
          VectorSourceColor(*This\Settings\GetTextColor())
          VectorFont(FontID(*This\Fonts\CardTitleFontID))
          DrawVectorText(*This\Boards()\Cards()\Title)
          
          MovePathCursor(*This\Boards()\Cards()\DescriptionX, *This\Boards()\Cards()\DescriptionY, #PB_Path_Default)
          VectorFont(FontID(*This\Fonts\CardNormalFontID))
          DrawVectorParagraph(*This\Boards()\Cards()\Description, *This\Boards()\Cards()\DescriptionWidth, *This\Boards()\Cards()\DescriptionHeight)
          
        Next
        
      Next
      
      
      If *This\LeftMouseButtonDown = #True And *This\DraggedCard\NeedToBeRendered = #True
        
        DrawRoundBox(*This\DraggedCard\Card\PosX, *This\DraggedCard\Card\PosY, *This\DraggedCard\Card\Width, *This\DraggedCard\Card\Height, 3.0, 10, *This\Settings\GetCardBackColor(), *This\Settings\GetSelectedBorderColor())	
        
        MovePathCursor(*This\DraggedCard\Card\TitleX, *This\DraggedCard\Card\TitleY, #PB_Path_Default)
        VectorSourceColor(*This\Settings\GetTextColor())
        VectorFont(FontID(*This\Fonts\CardTitleFontID))
        DrawVectorText(*This\DraggedCard\Card\Title)
        
        MovePathCursor(*This\DraggedCard\Card\DescriptionX, *This\DraggedCard\Card\DescriptionY, #PB_Path_Default)
        VectorFont(FontID(*This\Fonts\CardNormalFontID))
        DrawVectorParagraph(*This\DraggedCard\Card\Description, *This\DraggedCard\Card\DescriptionWidth, *This\DraggedCard\Card\DescriptionHeight)
        
      EndIf
      
      StopVectorDrawing()
      
    EndIf
    
  EndProcedure
  
  Procedure DrawEverything(*This.Private_Members)
    
    *This\Width = GadgetWidth(*This\CanvasID)
    *This\Height = GadgetHeight(*This\CanvasID)
   
    Protected CurrentPosition.Position
    
    CurrentPosition\X = *This\Margins\Left
    CurrentPosition\Y = *This\Margins\Top
    
    ; The Pre drawing pass to locate everything
    
    PreDrawBoards(*This, CurrentPosition)
    
    ; Resize Gadgets
    
    SetGadgetAttribute(*This\ScrollAreaID, #PB_ScrollArea_InnerHeight, *This\Height)
    ResizeGadget(*This\CanvasID, #PB_Ignore, #PB_Ignore, #PB_Ignore, *This\Height)
    
    ; The drawing pass to draw everything
    
    DrawBoards(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Fonts related methods <<<<<
  
  Procedure FreeFonts(*This.Private_Members)
    
    If IsFont(*This\Fonts\TitleFontID)
      FreeFont(*This\Fonts\TitleFontID)
    EndIf
    
    If IsFont(*This\Fonts\CardTitleFontID)
      FreeFont(*This\Fonts\CardTitleFontID)
    EndIf
    
    If IsFont(*This\Fonts\CardNormalFontID)
      FreeFont(*This\Fonts\CardNormalFontID)
    EndIf
    
  EndProcedure
  
  Procedure LoadFonts(*This.Private_Members)
    
    *This\Fonts\TitleFontID = LoadFont(#PB_Any, *This\Settings\GetFontName(), *This\Settings\GetFontSize() + 12)
    *This\Fonts\CardTitleFontID = LoadFont(#PB_Any, *This\Settings\GetFontName(), *This\Settings\GetFontSize() + 6)
    *This\Fonts\CardNormalFontID = LoadFont(#PB_Any, *This\Settings\GetFontName(), *This\Settings\GetFontSize() + 0)
    
  EndProcedure
  
  Procedure ReloadFonts(*This.Private_Members)
    
    FreeFonts(*This)
    LoadFonts(*This)
    
  EndProcedure
  
  Procedure.s GetSelectedBoardName(*This.Private_Members)
    
    ForEach *This\Boards()
      
      If *This\Boards()\IsSelected = #True
        ProcedureReturn *This\Boards()\Name
      EndIf
      
    Next
    
    ProcedureReturn ""
  EndProcedure
  
  Procedure GetSelectedCardInfo(*This.Private_Members, *UUID.String, *Title.String, *Description.String)
    
    ForEach *This\Boards()\Cards()
      
      If *This\Boards()\Cards()\IsSelected = #True
        
        *UUID\s = *This\Boards()\Cards()\UUID
        
        If *Title <> #Null
          *Title\s = *This\Boards()\Cards()\Title
        EndIf
        
        If *Description <> #Null
          *Description\s = *This\Boards()\Cards()\Description
        EndIf
        
        Break
        
      EndIf
      
    Next
   
  EndProcedure
  
  Procedure SetBoardDisplayName(*This.Private_Members, BoardName.s, BoardDisplayName.s)
    
    ForEach *This\Boards()
      If *This\Boards()\Name = BoardName
        *This\Boards()\DisplayName = BoardDisplayName
        Break
      EndIf
    Next
    
  EndProcedure
  
  Procedure UpdateBoardCard(*This.Private_Members, BoardName.s, UUID.s, Title.s, Description.s)
    
    ForEach *This\Boards()
      
      If *This\Boards()\Name = BoardName
        
        ForEach *This\Boards()\Cards()
          
          If *This\Boards()\Cards()\UUID = UUID
            *This\Boards()\Cards()\Title = Title
            *This\Boards()\Cards()\Description = Description
            Break 2
          EndIf
          
        Next
        
        
      EndIf
      
    Next
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Add to linked list operator(s) <<<<<
  
  Procedure AddBoard(*This.Private_Members, BoardName.s, BoardDisplayName.s)
    
    AddElement(*This\Boards())
    *This\Boards()\Name = BoardName
    *This\Boards()\DisplayName = BoardDisplayName
    *This\Boards()\Width = #BOARD_MIN_WIDTH
    *This\Boards()\Height = #BOARD_MIN_HEIGHT
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Add to linked list operator(s) <<<<<
  
  Procedure AddBoardCard(*This.Private_Members, BoardName.s, Title.s, Description.s, UUID.s)
    
    ForEach *This\Boards()
      
      If *This\Boards()\Name = BoardName
        AddElement(*This\Boards()\Cards())
        *This\Boards()\Cards()\Title = Title
        *This\Boards()\Cards()\Description = Description
        *This\Boards()\Cards()\UUID = UUID
        Break
      EndIf
      
    Next
    
  EndProcedure
  
  Procedure ClearBoardCards(*This.Private_Members)
    
    ForEach *This\Boards()
      ClearList(*This\Boards()\Cards())
    Next
    
    DrawEverything(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Refresh State methods <<<<<
  
  Procedure.i MouseHovering(Mx.i, My.i, x.i, y.i, w.i, h.i)
    
    If Mx > x And Mx < (x+w) And My > y And My < (y + h) 
      ProcedureReturn #True
    EndIf
    
    ProcedureReturn  #False
  EndProcedure
  
  Procedure RefreshFlyingOverState(*This.Private_Members)
    
    MouseX.i = GetGadgetAttribute(*This\CanvasID, #PB_Canvas_MouseX)
    MouseY.i = GetGadgetAttribute(*This\CanvasID, #PB_Canvas_MouseY)
    
    ForEach *This\Boards()
      
      *This\Boards()\AreWeFlyingOver = #False
      
      ForEach *This\Boards()\Cards()
        *This\Boards()\Cards()\AreWeFlyingOver = #False
      Next
      
    Next
    
    ForEach *This\Boards()
      
      If MouseHovering(MouseX, MouseY, *This\Boards()\PosX, *This\Boards()\PosY, *This\Boards()\Width, *This\Boards()\Height)
        
        *This\Boards()\AreWeFlyingOver = #True
        
        ForEach *This\Boards()\Cards()
          
          If MouseHovering(MouseX, MouseY, *This\Boards()\Cards()\PosX, *This\Boards()\Cards()\PosY, *This\Boards()\Cards()\Width, *This\Boards()\Cards()\Height)
            *This\Boards()\Cards()\AreWeFlyingOver = #True
            Break
          EndIf
          
        Next
        
        Break
        
      EndIf
      
    Next
    
    DrawEverything(*This)
    
  EndProcedure
  
  Procedure RefreshLeftButtonState(*This.Private_Members, State.i)
    
    ForEach *This\Boards()
      
      *This\Boards()\IsSelected = #False
      
      ForEach *This\Boards()\Cards()
        *This\Boards()\Cards()\IsSelected = #False
      Next
      
    Next
    
    *This\LeftMouseButtonDown = State
    MouseX.i = GetGadgetAttribute(*This\CanvasID, #PB_Canvas_MouseX)
    MouseY.i = GetGadgetAttribute(*This\CanvasID, #PB_Canvas_MouseY)
    
    
    ForEach *This\Boards()
      If MouseHovering(MouseX, MouseY, *This\Boards()\PosX, *This\Boards()\PosY, *This\Boards()\Width, *This\Boards()\Height)
        *This\Boards()\IsSelected = #True
        Break
      EndIf
    Next  
    
    ForEach *This\Boards()\Cards()
      
      If MouseHovering(MouseX, MouseY, *This\Boards()\Cards()\PosX, *This\Boards()\Cards()\PosY, *This\Boards()\Cards()\Width, *This\Boards()\Cards()\Height)
        *This\Boards()\Cards()\IsSelected = #True
        Break
      EndIf
      
    Next
    
    If *This\LeftMouseButtonDown = #True And *This\DraggedCard\NeedToBeRendered = #False
      
      If *This\Boards()\IsSelected = #True
        
        If ListSize(*This\Boards()\Cards()) >= 1 And *This\DraggedCard\FromListName <> *This\Boards()\Name
          
          If *This\Boards()\Cards()\IsSelected = #True
            *This\DraggedCard\FromListName = *This\Boards()\Name
            *This\DraggedCard\FromListIndex = ListIndex(*This\Boards()\Cards())
            *This\DraggedCard\Card\Title = *This\Boards()\Cards()\Title
            *This\DraggedCard\Card\Description = *This\Boards()\Cards()\Description
            *This\DraggedCard\Card\UUID = *This\Boards()\Cards()\UUID
            *This\DraggedCard\Card\Width = *This\Boards()\Cards()\Width
            *This\DraggedCard\Card\Height = *This\Boards()\Cards()\Height
            *This\DraggedCard\Card\PosX = *This\Boards()\Cards()\PosX
            *This\DraggedCard\Card\PosY = *This\Boards()\Cards()\PosY
            *This\DraggedCard\NeedToBeRendered = #True
          EndIf
          
        EndIf
        
      EndIf
      
    ElseIf *This\LeftMouseButtonDown = #False And *This\DraggedCard\NeedToBeRendered = #True

      If *This\Boards()\AreWeFlyingOver = #True And *This\Boards()\Name <> *This\DraggedCard\FromListName And *This\DraggedCard\FromListName <> ""
        
        *This\DraggedCard\ToListName = *This\Boards()\Name
        LastElement(*This\Boards()\Cards())
        AddElement(*This\Boards()\Cards())
        *This\Boards()\Cards()\Title = *This\DraggedCard\Card\Title
        *This\Boards()\Cards()\Description = *This\DraggedCard\Card\Description
        *This\Boards()\Cards()\UUID = *This\DraggedCard\Card\UUID
        *This\Boards()\Cards()\Width = *This\Boards()\Width - *This\Margins\Left - *This\Margins\Right
        *This\Boards()\Cards()\NeedToBeRendered = #True
        
        ForEach *This\Boards()
          
          If *This\Boards()\Name = *This\DraggedCard\FromListName
            SelectElement(*This\Boards()\Cards(), *This\DraggedCard\FromListIndex)
            DeleteElement(*This\Boards()\Cards())
            Break
          EndIf
          
        Next
        
        ForEach *This\Boards()
          
          *This\Boards()\IsSelected = #False
          
          ForEach *This\Boards()\Cards()
            *This\Boards()\Cards()\IsSelected = #False
          Next
          
        Next
        
        If *This\OnDragSuccessful <> #Null
          MoveCardBetweenLists.OnDragSuccessful = *This\OnDragSuccessful
          MoveCardBetweenLists(*This\OnDragUserData, *This\DraggedCard\Card\UUID, *This\DraggedCard\FromListName, *This\DraggedCard\ToListName)
        EndIf
        
        *This\DraggedCard\NeedToBeRendered = #False
        *This\DraggedCard\FromListName = ""
        *This\DraggedCard\ToListName = ""
        
      Else
        
        *This\DraggedCard\NeedToBeRendered = #False
        *This\DraggedCard\FromListName = ""
        *This\DraggedCard\ToListName = ""
        
      EndIf
      
    EndIf
    
  EndProcedure
  
  Procedure RefreshDraggedCardPosition(*This.Private_Members)
    
    If *This\LeftMouseButtonDown = #True And *This\DraggedCard\NeedToBeRendered = #True
      *This\DraggedCard\Card\PosX = GetGadgetAttribute(*This\CanvasID, #PB_Canvas_MouseX) - *This\DraggedCard\Card\Width / 2.0
      *This\DraggedCard\Card\PosY = GetGadgetAttribute(*This\CanvasID, #PB_Canvas_MouseY) - *This\DraggedCard\Card\Height / 2.0  
    EndIf
    
  EndProcedure
  
  Procedure.i DeleteBoardCard(*This.Private_Members, BoardName.s, UUID.s)
    
    Deleted.i = #False
    
    ForEach *This\Boards()
      
      If *This\Boards()\Name = BoardName
        
        ForEach *This\Boards()\Cards()
          
          If UUID = *This\Boards()\Cards()\UUID
            DeleteElement(*This\Boards()\Cards())
            DrawEverything(*This)
            Deleted = #True
            Break 2
          EndIf
          
        Next
        
      EndIf
      
    Next
    
    ProcedureReturn Deleted
  EndProcedure
  
  Procedure ComputeBoardCanvasWidth(*This.Private_Members)
    
    BoardCount.i = ListSize(*This\Boards())
    
    ProcedureReturn BoardCount * #BOARD_MIN_WIDTH + (BoardCount * (*This\Margins\Left + *This\Margins\Right))
  EndProcedure
  
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Destructor <<<<<
  
  Procedure Free(*This.Private_Members)
    
    FreeFonts(*This)
    FreeStructure(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Constructor <<<<<
  
  Procedure.i New(ScrollAreaID.i, CanvasID.i, *Settings.Setting::Setting, *OnDragSuccessful, OnDragUserData.i)
    
    *This.Private_Members = AllocateStructure(Private_Members)
    *This\VirtualTable = ?START_METHODS
    
    *This\ScrollAreaID = ScrollAreaID
    *This\CanvasID = CanvasID
    *This\Settings = *Settings
    
    *This\Margins\Top = 10
    *This\Margins\Left = 10
    *This\Margins\Right = 10
    *This\Margins\Bottom = 10
    
    *This\OnDragSuccessful = *OnDragSuccessful
    *This\OnDragUserData = OnDragUserData
    
    LoadFonts(*This)
    
    ProcedureReturn *This
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Virtual Table Entries <<<<<
  
  DataSection
    START_METHODS:
    Data.i @ReloadFonts()
    Data.i @GetSelectedBoardName()
    Data.i @GetSelectedCardInfo()
    Data.i @SetBoardDisplayName()
    Data.i @UpdateBoardCard()
    Data.i @AddBoard()
    Data.i @AddBoardCard()
    Data.i @ClearBoardCards()
    Data.i @DrawEverything()
    Data.i @RefreshFlyingOverState()
    Data.i @RefreshLeftButtonState()
    Data.i @RefreshDraggedCardPosition()
    Data.i @DeleteBoardCard()
    Data.i @ComputeBoardCanvasWidth()
    Data.i @Free()
    END_METHODS:
  EndDataSection
  
  EnableDebugger
  
EndModule

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code generated in : 00.001 seconds (163000.00 lines/second) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<
; <<<<< END OF FILE <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 6.11 LTS (Linux - x64)
; Folding = --0---
; EnableXP
; CompileSourceDirectory